[config]
# Make it so by default, commands are run at the parent level instead of in each individual workspace
default_to_workspace = false

# Don't load the builtin tasks because they're fucking broken
skip_core_tasks = true

[env.development]
TARGET_SUBDIR = "debug"

[env.production]
TARGET_SUBDIR = "release"

[tasks.default]
alias = "build-flow"

[tasks.build-flow]
description = "Builds the workspace member projects and assembles them to prepare a single folder for distribution."
dependencies = [
    "clean",
    "build-members",
    "move-client-dist"
]

[tasks.serve]
description = "Runs a live web server which recompiles and reruns itself when changes to the source code are made."
watch = true
dependencies = [
    "build-members",
    "move-client-dist",
    "serve-run"
]

[tasks.stop]
description = "Kills the currently running live web server."
dependencies = [
    "serve-kill",
    "db-kill"
]

[tasks.format]
command = "cargo"
args = ["fmt", "--", "--emit=files"]

[tasks.clean]
description = "Removes the directories used for build outputs, mainly \"target\" and \"client/dist\"."
dependencies = [
    "clean-cargo",
    "clean-client-dist"
]

[tasks.clean-cargo]
private = true
command = "cargo"
args = ["clean"]

[tasks.clean-client-dist]
private = true
ignore_errors = true # just in case rm throws an error if it can't find client/dist
command = "rm"
args = ["-rf", "client/dist"]

[tasks.build-members]
private = true
description = "Runs the build task on all workspace members."
run_task = { name = "build", fork = true }

[tasks.build]
description = "Meant to build an individual workspace member."
workspace = true
dependencies = [
    "format",
    "build-dev",
    "build-prod"
]

[tasks.build-dev]
private = true
condition = { profiles = ["development"] }
command = "cargo"
args = ["build"]

[tasks.build-prod]
private = true
condition = { profiles = ["production"] }
command = "cargo"
args = ["build", "--release"]

[tasks.remove-target-client-dist]
private = true
command = "rm"
args = ["-rf", "target/${TARGET_SUBDIR}/dist"]

[tasks.move-client-dist]
private = true
command = "cp"
args = ["-r", "client/dist", "target/${TARGET_SUBDIR}/"]
dependencies = ["remove-target-client-dist"]

[tasks.mk-run-dir]
description = "Makes sure the run directory exists for the development server."
private = true
ignore_errors = true
command = "mkdir"
args = ["-p", "run"]

[tasks.db-init]
description = "Initializes the PostgreSQL development server."
private = true
ignore_errors = true # errors if the db server already exists, we can ignore that
cwd = "run"
command = "initdb"
args = ["-U", "${PGUSER}"]

[tasks.db]
description = "Starts the development PostgreSQL server."
ignore_errors = true # errors if the server is already running, we can ignore that
cwd = "run"
command = "pg_ctl"
args = ["-o", "\"--unix_socket_directories=\\\"${PGHOST}\\\"\"", "start"]
dependencies = ["db-init"]

[tasks.db-create]
description = "Creates the database for the current user on the PostgreSQL development server."
private = true
ignore_errors = true # errors if the db already exists, we can ignore that
cwd = "run"
command = "createdb"
dependencies = ["db"]

[tasks.db-kill]
description = "Stops the currently running PostgreSQL server."
private = true
ignore_errors = true # errors if the db isn't running, we can ignore that
cwd = "run"
command = "pg_ctl"
args = ["stop"]

[tasks.serve-run]
description = "Starts the development server in a tmux background session."
private = true
cwd = "run"
command = "tmux"
args = ["new-session", "-d", "-s", "pigweb", "../target/${TARGET_SUBDIR}/pigweb_server"]
dependencies = ["mk-run-dir", "db-create", "serve-kill"]

[tasks.serve-kill]
description = "Stops the currently running development server."
private = true
ignore_errors = true # this will err if there isn't already a session with the name, which is fine
command = "tmux"
args = ["kill-session", "-t", "pigweb"]
